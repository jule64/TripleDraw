Ideas on improving performance:  random numbers generation take about 40%
of total runtime as shown in the profiler results below (see radom.py).  This
could be significantly reduced by having random numbers generated while the simulation
is not running.  At runtime the sequences could then simply 
be retrieved from a list as needed.  This would require the use of multithreading/multiprocessing
in order to have the random number generated independently but also during simulations when new random
numbers need to be created


Nber of draws left: 0

Target: 11 low

starting hand	|  Odds (%)
[],[]		|  4.87


         8688251 function calls in 10.126 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000   10.126   10.126 <string>:1(<module>)
    50000    0.044    0.000    1.140    0.000 deck.py:106(_getremainingdeck)
  2600000    0.431    0.000    0.431    0.000 deck.py:110(<lambda>)
    50000    0.597    0.000    1.037    0.000 deck.py:113(_gettree)
   650000    0.115    0.000    0.115    0.000 deck.py:118(<genexpr>)
   650000    0.408    0.000    0.408    0.000 deck.py:118(<lambda>)
    50000    0.122    0.000    0.145    0.000 deck.py:121(_getfinseqs)
    50000    0.251    0.000    0.251    0.000 deck.py:129(_getanysuitcardsseqs)
    50000    0.039    0.000    0.039    0.000 deck.py:136(_getrankcards)
    50000    0.047    0.000    0.047    0.000 deck.py:143(_getfullcards)
        1    0.000    0.000    0.000    0.000 deck.py:32(__init__)
    50000    0.179    0.000    0.253    0.000 deck.py:62(retrieve)
    50000    0.474    0.000    7.140    0.000 deck.py:73(get_sequences)
    50000    0.088    0.000    0.088    0.000 player.py:13(__init__)
    50000    0.103    0.000    0.356    0.000 player.py:38(draw)
    50000    0.147    0.000    1.486    0.000 player.py:53(check_last)
    50000    3.616    0.000    3.959    0.000 random.py:290(sample)
        1    0.901    0.901   10.125   10.125 simulator.py:21(run_simu)
        1    0.000    0.000   10.126   10.126 simulator.py:79(startme)
    79421    0.048    0.000    0.048    0.000 strategy.py:140(set_is_failed)
        1    0.000    0.000    0.000    0.000 strategy.py:28(__init__)
    50000    0.018    0.000    0.018    0.000 strategy.py:37(reset)
    50000    0.965    0.000    1.339    0.000 strategy.py:41(run)
    99193    0.012    0.000    0.012    0.000 {abs}
    50000    0.664    0.000    1.095    0.000 {filter}
    50000    0.009    0.000    0.009    0.000 {len}
    50000    0.015    0.000    0.015    0.000 {math.ceil}
    50000    0.060    0.000    0.060    0.000 {math.log}
    54813    0.045    0.000    0.045    0.000 {max}
   200000    0.061    0.000    0.061    0.000 {method 'count' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
   250000    0.096    0.000    0.096    0.000 {method 'index' of 'list' objects}
   250000    0.043    0.000    0.043    0.000 {method 'pop' of 'list' objects}
  2600000    0.260    0.000    0.260    0.000 {method 'random' of '_random.Random' objects}
    50000    0.088    0.000    0.088    0.000 {method 'sort' of 'list' objects}
   304814    0.178    0.000    0.178    0.000 {range}
        2    0.000    0.000    0.000    0.000 {sorted}
        2    0.000    0.000    0.000    0.000 {zip}


